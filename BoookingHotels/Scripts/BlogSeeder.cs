using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using BoookingHotels.Data;
using BoookingHotels.Models;

namespace BoookingHotels.Scripts
{
    public static class BlogSeeder
    {
        public static async Task Seed(ApplicationDbContext context)
        {
            // Ch·ªâ seed blog cho c√°c host (Role = Host), kh√¥ng seed cho admin/user
            var hosts = await context.Users
                .Where(u => u.UserRoles.Any(ur => ur.Role.RoleName == "Host"))
                .ToListAsync();

            Console.WriteLine($"üîé C√≥ {hosts.Count} host");
            int totalHotels = 0, totalBlogs = 0, skippedHotels = 0;
            foreach (var host in hosts)
            {
                var hotels = await context.Hotels.Where(h => h.CreatedBy == host.UserId).ToListAsync();
                Console.WriteLine($"üë§ Host {host.UserName} ({host.UserId}) c√≥ {hotels.Count} hotel");
                totalHotels += hotels.Count;
                foreach (var hotel in hotels)
                {
                    var city = hotel.City ?? "Vi·ªát Nam";
                    var title = $"Tr·∫£i nghi·ªám t·∫°i {hotel.Name} - {city}";
                    var shortDesc = $"Review kh√°ch s·∫°n {hotel.Name} t·∫°i {city}, ƒëi·ªÉm ƒë·∫øn n·ªïi b·∫≠t cho du kh√°ch.";
                    var content = $"Kh√°ch s·∫°n {hotel.Name} t·ªça l·∫°c t·∫°i {city}, n·ªïi ti·∫øng v·ªõi d·ªãch v·ª• chuy√™n nghi·ªáp, ph√≤ng ngh·ªâ ti·ªán nghi v√† v·ªã tr√≠ thu·∫≠n l·ª£i g·∫ßn c√°c ƒëi·ªÉm du l·ªãch n·ªïi ti·∫øng. Trong chuy·∫øn ƒëi v·ª´a qua, t√¥i ƒë√£ c√≥ d·ªãp tr·∫£i nghi·ªám kh√¥ng gian sang tr·ªçng, ·∫©m th·ª±c ƒëa d·∫°ng v√† ƒë·ªôi ng≈© nh√¢n vi√™n th√¢n thi·ªán. ƒê·∫∑c bi·ªát, kh√°ch s·∫°n n·∫±m g·∫ßn c√°c ƒë·ªãa danh n·ªïi ti·∫øng, gi√∫p vi·ªác di chuy·ªÉn v√† kh√°m ph√° tr·ªü n√™n d·ªÖ d√†ng. ƒê√¢y l√† l·ª±a ch·ªçn l√Ω t∆∞·ªüng cho k·ª≥ ngh·ªâ ho·∫∑c c√¥ng t√°c t·∫°i {city}. N·∫øu b·∫°n ƒëang t√¨m ki·∫øm m·ªôt n∆°i l∆∞u tr√∫ ch·∫•t l∆∞·ª£ng t·∫°i {city}, h√£y c√¢n nh·∫Øc kh√°ch s·∫°n {hotel.Name} cho chuy·∫øn ƒëi ti·∫øp theo c·ªßa m√¨nh!";
                    var blog = await context.Blogs.FirstOrDefaultAsync(b => b.HotelId == hotel.HotelId && b.ReviewerId == host.UserId);
                    if (blog == null)
                    {
                        blog = new Blog
                        {
                            Title = title,
                            Content = content,
                            ShortDescription = shortDesc,
                            Author = host.FullName ?? host.UserName,
                            CreatedDate = DateTime.Now.AddDays(-new Random().Next(1, 60)),
                            ReviewerId = host.UserId,
                            HotelId = hotel.HotelId
                        };
                        await context.Blogs.AddAsync(blog);
                        totalBlogs++;
                        Console.WriteLine($"‚úÖ Th√™m blog cho hotel {hotel.HotelId} ({hotel.Name}) c·ªßa host {host.UserName}");
                    }
                    else
                    {
                        blog.Title = title;
                        blog.Content = content;
                        blog.ShortDescription = shortDesc;
                        blog.Author = host.FullName ?? host.UserName;
                        blog.CreatedDate = DateTime.Now.AddDays(-new Random().Next(1, 60));
                        totalBlogs++;
                        Console.WriteLine($"‚ôªÔ∏è Overwrite blog cho hotel {hotel.HotelId} ({hotel.Name}) c·ªßa host {host.UserName}");
                    }
                }
            }

            await context.SaveChangesAsync();
            Console.WriteLine($"üìä T·ªïng s·ªë hotel c·ªßa host: {totalHotels}, blog ƒë√£ th√™m: {totalBlogs}, hotel b·ªã b·ªè qua: {skippedHotels}");

            // Seed thumbnail images for blogs
            var blogsWithoutThumbnail = await context.Blogs.Where(b => b.Thumbnail == null || b.Thumbnail == "").ToListAsync();
            var vietnamTravelImages = new[]
            {
                // Vietnam travel destinations
                "https://images.unsplash.com/photo-1507525428034-b723cf961d3e?auto=format&fit=crop&w=800&q=80", // Ha Long Bay
                "https://images.unsplash.com/photo-1465101046530-73398c7f28ca?auto=format&fit=crop&w=800&q=80", // Sapa mountains
                "https://images.unsplash.com/photo-1519125323398-675f0ddb6308?auto=format&fit=crop&w=800&q=80", // Phu Quoc beach
                "https://images.unsplash.com/photo-1529626455594-4ff0802cfb7e?auto=format&fit=crop&w=800&q=80", // Hoi An ancient town
                "https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=800&q=80", // Da Lat night sky
                "https://images.unsplash.com/photo-1519817650390-64a93db511ed?auto=format&fit=crop&w=800&q=80", // Nha Trang beach
                "https://images.unsplash.com/photo-1504674900247-0877df9cc836?auto=format&fit=crop&w=800&q=80", // Mui Ne sand dunes
                "https://images.unsplash.com/photo-1467269204594-9661b134dd2b?auto=format&fit=crop&w=800&q=80", // Fansipan mountain
                "https://images.unsplash.com/photo-1509228468518-180dd4864904?auto=format&fit=crop&w=800&q=80", // Hanoi street
                "https://images.unsplash.com/photo-1521401830884-6c03c1c87ebb?auto=format&fit=crop&w=800&q=80", // Resort beach in Vietnam
                "https://images.unsplash.com/photo-1500530855697-b586d89ba3ee?auto=format&fit=crop&w=800&q=80", // Ho Chi Minh City view
                "https://images.unsplash.com/photo-1465101178521-c1a4c8a0f8f9?auto=format&fit=crop&w=800&q=80", // Vietnamese hotel room
            };
            var rand = new Random();
            foreach (var blog in blogsWithoutThumbnail)
            {
                blog.Thumbnail = vietnamTravelImages[rand.Next(vietnamTravelImages.Length)];
                Console.WriteLine($"üñºÔ∏è Th√™m thumbnail ƒë·ªãa ƒëi·ªÉm du l·ªãch Vi·ªát Nam cho blog {blog.BlogId} - {blog.Title}");
            }
            await context.SaveChangesAsync();
        }
    }
}
