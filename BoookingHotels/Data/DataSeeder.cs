using BoookingHotels.Data;
using BoookingHotels.Models;
using Microsoft.EntityFrameworkCore;

namespace BoookingHotels.Data
{
    public static class DataSeeder
    {
        public static async Task SeedAsync(ApplicationDbContext context)
        {
            Console.WriteLine("üå± Starting data seeding...");

            // Seed Roles (ki·ªÉm tra ri√™ng bi·ªát)
            await SeedRoles(context);
            
            // Seed Users (ki·ªÉm tra ri√™ng bi·ªát)
            await SeedUsers(context);
            
            // Seed UserRoles
            await SeedUserRoles(context);
            
            // Seed Amenities
            await SeedAmenities(context);
            
            // Seed Hotels
            await SeedHotels(context);
            
            // Seed Rooms
            await SeedRooms(context);
            
            // Seed Room Amenities
            await SeedRoomAmenities(context);
            
            // Seed Photos
            await SeedPhotos(context);
            
            // Seed Vouchers
            await SeedVouchers(context);
            
            // Seed Bookings
            await SeedBookings(context);
            
            // Seed Reviews
            await SeedReviews(context);
            
            // Seed Blogs
            await SeedBlogs(context);

            await context.SaveChangesAsync();
        }

        private static async Task SeedRoles(ApplicationDbContext context)
        {
            if (!await context.Roles.AnyAsync())
            {
                var roles = new[]
                {
                    new Role { RoleName = "Admin" },
                    new Role { RoleName = "User" },
                    new Role { RoleName = "Host" }
                };

                await context.Roles.AddRangeAsync(roles);
                await context.SaveChangesAsync();
                Console.WriteLine("‚úÖ Seeded 3 Roles");
            }
            else
            {
                Console.WriteLine("‚ö†Ô∏è Roles already exist, skipping...");
            }
        }

        private static async Task SeedUsers(ApplicationDbContext context)
        {
            var currentUserCount = await context.Users.CountAsync();
            if (currentUserCount < 31) // C·∫ßn 31 users (1 admin + 10 hosts + 20 users)
            {
                var users = new List<User>();
                
                // Admin user (ch·ªâ th√™m n·∫øu ch∆∞a c√≥ admin)
                var adminExists = await context.Users.AnyAsync(u => u.UserName == "admin");
                if (!adminExists)
                {
                    users.Add(new User
                    {
                        UserName = "admin",
                        Email = "admin@booking.com", 
                        Password = BCrypt.Net.BCrypt.HashPassword("admin123"),
                        FullName = "Administrator",
                        Phone = $"012345{DateTime.Now.Millisecond:D4}", // Unique phone
                        Status = true,
                        CreatedAt = DateTime.Now,
                        AvatarUrl = "/Image/admin-avatar.jpg"
                    });
                }

                // Host users (ch·ªâ th√™m nh·ªØng host ch∆∞a c√≥)
                for (int i = 1; i <= 10; i++)
                {
                    var hostExists = await context.Users.AnyAsync(u => u.UserName == $"host{i}");
                    if (!hostExists)
                    {
                        users.Add(new User
                        {
                            UserName = $"host{i}",
                            Email = $"host{i}@booking.com",
                            Password = BCrypt.Net.BCrypt.HashPassword("host123"),
                            FullName = $"Host Number {i}",
                            Phone = $"0901234{i:D3}", // Unique phone pattern
                            Status = true,
                            CreatedAt = DateTime.Now.AddDays(-new Random().Next(1, 365)),
                            AvatarUrl = $"/Image/host{i}-avatar.jpg"
                        });
                    }
                }

                // Regular users (ch·ªâ th√™m nh·ªØng user ch∆∞a c√≥)
                for (int i = 1; i <= 20; i++)
                {
                    var userExists = await context.Users.AnyAsync(u => u.UserName == $"user{i}");
                    if (!userExists)
                    {
                        users.Add(new User
                        {
                            UserName = $"user{i}",
                            Email = $"user{i}@gmail.com",
                            Password = BCrypt.Net.BCrypt.HashPassword("user123"),
                            FullName = $"User Number {i}",
                            Phone = $"0987654{i:D3}", // Unique phone pattern
                            Status = true,
                            CreatedAt = DateTime.Now.AddDays(-new Random().Next(1, 365)),
                            AvatarUrl = $"/Image/user{i}-avatar.jpg"
                        });
                    }
                }

                if (users.Count > 0)
                {
                    await context.Users.AddRangeAsync(users);
                    await context.SaveChangesAsync();
                    Console.WriteLine($"‚úÖ Seeded {users.Count} Users");
                }
                else
                {
                    Console.WriteLine("‚ö†Ô∏è All required users already exist");
                }
            }
            else
            {
                Console.WriteLine("‚ö†Ô∏è Users already exist, skipping...");
            }
        }

        private static async Task SeedUserRoles(ApplicationDbContext context)
        {
            if (await context.UserRoles.AnyAsync())
            {
                Console.WriteLine("‚ö†Ô∏è UserRoles already exist, skipping...");
                return;
            }

            var userRoles = new List<UserRole>();
            
            // L·∫•y actual User IDs v√† Role IDs
            var adminUser = await context.Users.FirstOrDefaultAsync(u => u.UserName == "admin");
            var adminRole = await context.Roles.FirstOrDefaultAsync(r => r.RoleName == "Admin");
            var hostRole = await context.Roles.FirstOrDefaultAsync(r => r.RoleName == "Host");
            var userRole = await context.Roles.FirstOrDefaultAsync(r => r.RoleName == "User");

            if (adminUser != null && adminRole != null)
            {
                userRoles.Add(new UserRole { UserId = adminUser.UserId, RoleId = adminRole.RoleId });
            }

            // Host roles
            for (int i = 1; i <= 10; i++)
            {
                var hostUser = await context.Users.FirstOrDefaultAsync(u => u.UserName == $"host{i}");
                if (hostUser != null && hostRole != null)
                {
                    userRoles.Add(new UserRole { UserId = hostUser.UserId, RoleId = hostRole.RoleId });
                }
            }

            // Regular user roles
            for (int i = 1; i <= 20; i++)
            {
                var regularUser = await context.Users.FirstOrDefaultAsync(u => u.UserName == $"user{i}");
                if (regularUser != null && userRole != null)
                {
                    userRoles.Add(new UserRole { UserId = regularUser.UserId, RoleId = userRole.RoleId });
                }
            }

            if (userRoles.Count > 0)
            {
                await context.UserRoles.AddRangeAsync(userRoles);
                await context.SaveChangesAsync();
                Console.WriteLine($"‚úÖ Seeded {userRoles.Count} UserRoles");
            }
        }

        private static async Task SeedAmenities(ApplicationDbContext context)
        {
            var amenities = new[]
            {
                new Amenities { Name = "Wi-Fi mi·ªÖn ph√≠", Icon = "fas fa-wifi" },
                new Amenities { Name = "ƒêi·ªÅu h√≤a", Icon = "fas fa-snowflake" },
                new Amenities { Name = "TV", Icon = "fas fa-tv" },
                new Amenities { Name = "T·ªß l·∫°nh", Icon = "fas fa-cube" },
                new Amenities { Name = "Ban c√¥ng", Icon = "fas fa-home" },
                new Amenities { Name = "B√£i ƒë·∫≠u xe", Icon = "fas fa-car" },
                new Amenities { Name = "H·ªì b∆°i", Icon = "fas fa-swimming-pool" },
                new Amenities { Name = "Gym", Icon = "fas fa-dumbbell" },
                new Amenities { Name = "Spa", Icon = "fas fa-spa" },
                new Amenities { Name = "Nh√† h√†ng", Icon = "fas fa-utensils" },
                new Amenities { Name = "Bar", Icon = "fas fa-cocktail" },
                new Amenities { Name = "Ph√≤ng h·ªçp", Icon = "fas fa-handshake" },
                new Amenities { Name = "M√°y s·∫•y t√≥c", Icon = "fas fa-wind" },
                new Amenities { Name = "K√©t an to√†n", Icon = "fas fa-shield-alt" },
                new Amenities { Name = "Ph·ª•c v·ª• ph√≤ng 24/7", Icon = "fas fa-clock" },
                new Amenities { Name = "M√°y gi·∫∑t", Icon = "fas fa-tshirt" },
                new Amenities { Name = "B√†n l√†m vi·ªác", Icon = "fas fa-desk" },
                new Amenities { Name = "Minibar", Icon = "fas fa-glass-whiskey" },
                new Amenities { Name = "M√°y pha c√† ph√™", Icon = "fas fa-coffee" },
                new Amenities { Name = "View bi·ªÉn", Icon = "fas fa-water" }
            };

            await context.Amenities.AddRangeAsync(amenities);
            await context.SaveChangesAsync();
        }

        private static async Task SeedHotels(ApplicationDbContext context)
        {
            var random = new Random();
            var hotels = new List<Hotel>();
            var cities = new[] { "H√† N·ªôi", "TP.HCM", "ƒê√† N·∫µng", "H·ªôi An", "Nha Trang", "Ph√∫ Qu·ªëc", "Sa Pa", "H·∫° Long", "C·∫ßn Th∆°", "Hu·∫ø" };
            var hotelTypes = new[] { "Resort", "Hotel", "Homestay", "Villa", "Apartment" };

            for (int i = 1; i <= 30; i++)
            {
                var city = cities[random.Next(cities.Length)];
                var type = hotelTypes[random.Next(hotelTypes.Length)];
                
                hotels.Add(new Hotel
                {
                    Name = $"{type} {city} {i}",
                    Description = $"Kh√°ch s·∫°n tuy·ªát v·ªùi t·∫°i {city} v·ªõi ƒë·∫ßy ƒë·ªß ti·ªán nghi hi·ªán ƒë·∫°i. V·ªã tr√≠ thu·∫≠n l·ª£i, ph·ª•c v·ª• chuy√™n nghi·ªáp.",
                    Address = $"S·ªë {i * 10}, ƒê∆∞·ªùng ABC, Qu·∫≠n {random.Next(1, 13)}, {city}",
                    City = city,
                    Country = "Vi·ªát Nam",
                    Status = true,
                    CreatedAt = DateTime.Now.AddDays(-random.Next(30, 365)),
                    CreatedBy = random.Next(2, 12), // Host users (2-11)
                    IsApproved = true,
                    Latitude = 21.0285 + random.NextDouble() * 0.1, // Random around Hanoi
                    Longitude = 105.8542 + random.NextDouble() * 0.1
                });
            }

            await context.Hotels.AddRangeAsync(hotels);
            await context.SaveChangesAsync();
        }

        private static async Task SeedRooms(ApplicationDbContext context)
        {
            var random = new Random();
            var rooms = new List<Room>();
            var roomTypes = new[] { "Ph√≤ng ƒë∆°n", "Ph√≤ng ƒë√¥i", "Ph√≤ng gia ƒë√¨nh", "Suite", "Deluxe", "Standard" };

            // M·ªói hotel c√≥ 3-5 ph√≤ng
            for (int hotelId = 1; hotelId <= 30; hotelId++)
            {
                var roomCount = random.Next(3, 6);
                for (int j = 1; j <= roomCount; j++)
                {
                    var roomType = roomTypes[random.Next(roomTypes.Length)];
                    var capacity = roomType == "Ph√≤ng gia ƒë√¨nh" ? random.Next(4, 7) : 
                                  roomType == "Suite" ? random.Next(2, 5) : 
                                  roomType == "Ph√≤ng ƒë∆°n" ? 1 : 2;

                    rooms.Add(new Room
                    {
                        HotelId = hotelId,
                        Name = $"{roomType} {j:D2}",
                        Capacity = capacity,
                        Price = (decimal)(roomType == "Suite" ? random.Next(1500000, 3000000) : 
                                        roomType == "Deluxe" ? random.Next(1000000, 2000000) : 
                                        random.Next(500000, 1500000)),
                        Size = random.Next(20, 50),
                        BedType = capacity > 2 ? "King bed + Sofa bed" : capacity == 2 ? "Queen bed" : "Single bed",
                        Status = true
                    });
                }
            }

            await context.Rooms.AddRangeAsync(rooms);
            await context.SaveChangesAsync();
        }

        private static async Task SeedRoomAmenities(ApplicationDbContext context)
        {
            var random = new Random();
            var roomAmenities = new List<RoomAmenitie>();
            var roomCount = await context.Rooms.CountAsync();

            // M·ªói ph√≤ng c√≥ 5-10 ti·ªán nghi ng·∫´u nhi√™n
            for (int roomId = 1; roomId <= roomCount; roomId++)
            {
                var amenityIds = Enumerable.Range(1, 20).OrderBy(x => random.Next()).Take(random.Next(5, 11)).ToList();
                
                foreach (var amenityId in amenityIds)
                {
                    roomAmenities.Add(new RoomAmenitie
                    {
                        RoomId = roomId,
                        AmenityId = amenityId
                    });
                }
            }

            await context.RoomAmenities.AddRangeAsync(roomAmenities);
            await context.SaveChangesAsync();
        }

        private static async Task SeedPhotos(ApplicationDbContext context)
        {
            var random = new Random();
            var photos = new List<Photos>();

            // ·∫¢nh cho hotels
            for (int hotelId = 1; hotelId <= 30; hotelId++)
            {
                var photoCount = random.Next(3, 6);
                for (int j = 1; j <= photoCount; j++)
                {
                    photos.Add(new Photos
                    {
                        HotelId = hotelId,
                        Url = $"/Image/{j}.jpg", // S·ª≠ d·ª•ng ·∫£nh c√≥ s·∫µn
                        SortOrder = j
                    });
                }
            }

            // ·∫¢nh cho rooms
            var roomCount = await context.Rooms.CountAsync();
            for (int roomId = 1; roomId <= roomCount; roomId++)
            {
                var photoCount = random.Next(2, 4);
                for (int j = 1; j <= photoCount; j++)
                {
                    photos.Add(new Photos
                    {
                        RoomId = roomId,
                        Url = $"/Image/{j + 3}.jpg", // S·ª≠ d·ª•ng ·∫£nh kh√°c
                        SortOrder = j
                    });
                }
            }

            await context.Photoss.AddRangeAsync(photos);
            await context.SaveChangesAsync();
        }

        private static async Task SeedVouchers(ApplicationDbContext context)
        {
            var random = new Random();
            var vouchers = new List<Voucher>();

            for (int i = 1; i <= 20; i++)
            {
                var discountType = random.Next(2) == 0 ? "Percentage" : "FixedAmount";
                var discountValue = discountType == "Percentage" ? random.Next(5, 31) : random.Next(50000, 500000);

                vouchers.Add(new Voucher
                {
                    Code = $"VOUCHER{i:D3}",
                    Description = $"Gi·∫£m gi√° {(discountType == "Percentage" ? $"{discountValue}%" : $"{discountValue:N0} VNƒê")} cho ƒë·∫∑t ph√≤ng",
                    DiscountType = discountType,
                    DiscountValue = discountValue,
                    MinOrderValue = discountType == "Percentage" ? random.Next(500000, 2000000) : 0,
                    Quantity = random.Next(10, 101),
                    ExpiryDate = DateTime.Now.AddDays(random.Next(30, 180)),
                    IsActive = true,
                    CreatedAt = DateTime.Now.AddDays(-random.Next(1, 60))
                });
            }

            await context.Vouchers.AddRangeAsync(vouchers);
            await context.SaveChangesAsync();
        }

        private static async Task SeedBookings(ApplicationDbContext context)
        {
            var random = new Random();
            var bookings = new List<Booking>();
            var statuses = new[] { BookingStatus.Pending, BookingStatus.Confirmed, BookingStatus.Paid, BookingStatus.Canceled };
            var roomCount = await context.Rooms.CountAsync();

            for (int i = 1; i <= 50; i++)
            {
                var checkIn = DateTime.Now.AddDays(random.Next(-30, 90));
                var checkOut = checkIn.AddDays(random.Next(1, 8));
                var roomId = random.Next(1, roomCount + 1);
                var room = await context.Rooms.FindAsync(roomId);
                var subtotal = room!.Price * (decimal)(checkOut - checkIn).Days;
                var discount = random.Next(0, 2) == 1 ? subtotal * 0.1m : 0;

                bookings.Add(new Booking
                {
                    UserId = random.Next(12, 32), // User IDs 12-31
                    HotelId = room.HotelId,
                    RoomId = roomId,
                    CheckIn = checkIn,
                    CheckOut = checkOut,
                    GuestName = $"Kh√°ch h√†ng {i}",
                    GuestPhone = $"090{random.Next(10000000, 99999999)}",
                    SubTotal = subtotal,
                    Discount = discount,
                    Total = subtotal - discount,
                    Status = statuses[random.Next(statuses.Length)],
                    Currency = "VND",
                    CreatedAt = DateTime.Now.AddDays(-random.Next(1, 60))
                });
            }

            await context.Bookings.AddRangeAsync(bookings);
            await context.SaveChangesAsync();
        }

        private static async Task SeedReviews(ApplicationDbContext context)
        {
            var random = new Random();
            var reviews = new List<Review>();
            var comments = new[]
            {
                "Kh√°ch s·∫°n tuy·ªát v·ªùi, ph√≤ng s·∫°ch s·∫Ω v√† tho·∫£i m√°i!",
                "D·ªãch v·ª• chuy√™n nghi·ªáp, nh√¢n vi√™n th√¢n thi·ªán.",
                "V·ªã tr√≠ thu·∫≠n l·ª£i, g·∫ßn nhi·ªÅu ƒë·ªãa ƒëi·ªÉm du l·ªãch.",
                "Ph√≤ng r·ªông r√£i, view ƒë·∫πp, r·∫•t h√†i l√≤ng.",
                "Gi√° c·∫£ h·ª£p l√Ω, ch·∫•t l∆∞·ª£ng t·ªët.",
                "S·∫Ω quay l·∫°i l·∫ßn sau, recommend cho m·ªçi ng∆∞·ªùi.",
                "B·ªØa s√°ng ngon, nhi·ªÅu m√≥n l·ª±a ch·ªçn.",
                "H·ªì b∆°i s·∫°ch s·∫Ω, khu v·ª±c gi·∫£i tr√≠ t·ªët.",
                "Check-in nhanh ch√≥ng, thu·∫≠n ti·ªán.",
                "C·∫ßn c·∫£i thi·ªán th√™m v·ªÅ √¢m thanh c√°ch √¢m."
            };

            var roomCount = await context.Rooms.CountAsync();

            for (int i = 1; i <= 80; i++)
            {
                var roomId = random.Next(1, roomCount + 1);
                var room = await context.Rooms.Include(r => r.Hotel).FirstAsync(r => r.RoomId == roomId);

                reviews.Add(new Review
                {
                    UserId = random.Next(12, 32), // User IDs 12-31
                    HotelId = room.HotelId,
                    RoomId = roomId,
                    Rating = random.Next(3, 6), // 3-5 stars
                    Comment = comments[random.Next(comments.Length)],
                    CreatedAt = DateTime.Now.AddDays(-random.Next(1, 90))
                });
            }

            await context.Reviews.AddRangeAsync(reviews);
            await context.SaveChangesAsync();
        }

        private static async Task SeedBlogs(ApplicationDbContext context)
        {
            var blogs = new[]
            {
                new Blog
                {
                    Title = "Top 10 kh√°ch s·∫°n t·ªët nh·∫•t t·∫°i H√† N·ªôi",
                    Content = "Kh√°m ph√° nh·ªØng kh√°ch s·∫°n h√†ng ƒë·∫ßu t·∫°i th·ªß ƒë√¥ v·ªõi ƒë·∫ßy ƒë·ªß ti·ªán nghi v√† d·ªãch v·ª• ch·∫•t l∆∞·ª£ng cao...",
                    ShortDescription = "Danh s√°ch c√°c kh√°ch s·∫°n ƒë∆∞·ª£c ƒë√°nh gi√° cao nh·∫•t t·∫°i H√† N·ªôi",
                    Author = "Admin",
                    CreatedDate = DateTime.Now.AddDays(-30),
                    ReviewerId = 1 // Admin user
                },
                new Blog
                {
                    Title = "Kinh nghi·ªám du l·ªãch ƒê√† N·∫µng - H·ªôi An",
                    Content = "H∆∞·ªõng d·∫´n chi ti·∫øt v·ªÅ l·ªãch tr√¨nh, ƒë·ªãa ƒëi·ªÉm tham quan v√† l·ª±a ch·ªçn ch·ªó ·ªü t·∫°i ƒê√† N·∫µng - H·ªôi An...",
                    ShortDescription = "Kinh nghi·ªám v√† tips du l·ªãch ƒê√† N·∫µng - H·ªôi An",
                    Author = "Travel Expert",
                    CreatedDate = DateTime.Now.AddDays(-25),
                    ReviewerId = 1
                },
                new Blog
                {
                    Title = "Nh·ªØng resort sang tr·ªçng t·∫°i Ph√∫ Qu·ªëc",
                    Content = "T·ªïng h·ª£p c√°c resort 5 sao t·∫°i ƒë·∫£o ng·ªçc Ph√∫ Qu·ªëc v·ªõi view bi·ªÉn tuy·ªát ƒë·∫πp v√† d·ªãch v·ª• ƒë·∫≥ng c·∫•p...",
                    ShortDescription = "Review c√°c resort cao c·∫•p t·∫°i Ph√∫ Qu·ªëc",
                    Author = "Resort Reviewer",
                    CreatedDate = DateTime.Now.AddDays(-20),
                    ReviewerId = 1
                }
            };

            await context.Blogs.AddRangeAsync(blogs);
            await context.SaveChangesAsync();
        }
    }
}