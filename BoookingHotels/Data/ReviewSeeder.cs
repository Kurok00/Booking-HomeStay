using BoookingHotels.Models;
using Microsoft.EntityFrameworkCore;

namespace BoookingHotels.Data
{
    public static class ReviewSeeder
    {
        public static async Task SeedReviewsAsync(ApplicationDbContext context)
        {
            Console.WriteLine("‚≠ê === B·∫ÆT ƒê·∫¶U SEED REVIEWS ===");


            // X√≥a t·∫•t c·∫£ reviews c≈© ƒë·ªÉ t·∫°o l·∫°i
            var existingReviews = await context.Reviews.ToListAsync();
            if (existingReviews.Any())
            {
                Console.WriteLine($"üóëÔ∏è  ƒêang x√≥a {existingReviews.Count} reviews c≈©...");
                context.Reviews.RemoveRange(existingReviews);
                await context.SaveChangesAsync();
                Console.WriteLine("‚úÖ ƒê√£ x√≥a reviews c≈©");
            }

            // L·∫•y t·∫•t c·∫£ users (AsNoTracking)
            var users = await context.Users.AsNoTracking().ToListAsync();
            if (users.Count < 5)
            {
                Console.WriteLine($"‚ùå C·∫ßn √≠t nh·∫•t 5 user ƒë·ªÉ seed reviews (hi·ªán c√≥ {users.Count})!");
                return;
            }

            // L·∫•y t·∫•t c·∫£ rooms (AsNoTracking)
            var rooms = await context.Rooms.AsNoTracking().ToListAsync();
            if (!rooms.Any())
            {
                Console.WriteLine("‚ùå Kh√¥ng c√≥ room n√†o ƒë·ªÉ t·∫°o reviews!");
                return;
            }

            var random = new Random();
            var reviews = new List<Review>();

            // Danh s√°ch c√°c comment m·∫´u theo rating
            var comments = new Dictionary<int, List<string>>
            {
                [5] = new List<string>
                {
                    "Ph√≤ng r·∫•t tuy·ªát v·ªùi! S·∫°ch s·∫Ω, ƒë·∫ßy ƒë·ªß ti·ªán nghi. Nh√¢n vi√™n nhi·ªát t√¨nh. Ch·∫Øc ch·∫Øn s·∫Ω quay l·∫°i!",
                    "Tuy·ªát v·ªùi! V∆∞·ª£t xa mong ƒë·ª£i. View ƒë·∫πp, ph√≤ng r·ªông r√£i. Highly recommended!",
                    "Ho√†n h·∫£o! Kh√¥ng c√≥ g√¨ ƒë·ªÉ ch√™. D·ªãch v·ª• 5 sao, ph√≤ng sang tr·ªçng, v·ªã tr√≠ thu·∫≠n l·ª£i.",
                    "C·ª±c k·ª≥ h√†i l√≤ng! Ph√≤ng ƒë·∫πp nh∆∞ h√¨nh, s·∫°ch s·∫Ω, ti·ªán nghi ƒë·∫ßy ƒë·ªß. S·∫Ω gi·ªõi thi·ªáu cho b·∫°n b√®.",
                    "Qu√° tuy·ªát! Tr·∫£i nghi·ªám tuy·ªát v·ªùi. Nh√¢n vi√™n th√¢n thi·ªán, ph√≤ng hi·ªán ƒë·∫°i, v·ªã tr√≠ ƒë·∫Øc ƒë·ªãa.",
                    "Perfect! Ph√≤ng r·ªông, view ƒë·∫πp, gi∆∞·ªùng √™m. ƒÇn s√°ng ngon. R·∫•t ƒë√°ng ti·ªÅn!",
                    "Xu·∫•t s·∫Øc! M·ªçi th·ª© ƒë·ªÅu ho√†n h·∫£o. S·∫Ω quay l·∫°i l·∫ßn sau khi ƒë·∫øn ƒë√¢y.",
                    "T·ªët nh·∫•t t·ª´ng ·ªü! Ph√≤ng ƒë·∫πp, s·∫°ch s·∫Ω, an ninh t·ªët. Highly recommended!",
                    "5 sao x·ª©ng ƒë√°ng! Ph·ª•c v·ª• t·∫≠n t√¨nh, ph√≤ng sang tr·ªçng, v·ªã tr√≠ thu·∫≠n ti·ªán.",
                    "Tuy·ªát v·ªùi kh√¥ng th·ªÉ t·∫£! M·ªçi th·ª© ƒë·ªÅu v∆∞·ª£t mong ƒë·ª£i. Ch·∫Øc ch·∫Øn s·∫Ω quay l·∫°i!"
                },
                [4] = new List<string>
                {
                    "Ph√≤ng t·ªët, s·∫°ch s·∫Ω. C√≥ m·ªôt v√†i ƒëi·ªÉm nh·ªè c·∫ßn c·∫£i thi·ªán nh∆∞ng nh√¨n chung ok.",
                    "Kh√° h√†i l√≤ng. View ƒë·∫πp, ph√≤ng r·ªông. Gi√° h∆°i cao m·ªôt ch√∫t.",
                    "T·ªët! Ph√≤ng s·∫°ch, ti·ªán nghi ƒë·∫ßy ƒë·ªß. Wifi h∆°i y·∫øu nh∆∞ng ch·∫•p nh·∫≠n ƒë∆∞·ª£c.",
                    "Kh√° ·ªïn! Nh√¢n vi√™n th√¢n thi·ªán. Ph√≤ng c√≥ m√πi h∆°i n·∫∑ng l√∫c ƒë·∫ßu nh∆∞ng sau ok.",
                    "Kh√¥ng t·ªá! V·ªã tr√≠ t·ªët, ph√≤ng ƒë·∫πp. √Çm thanh c√°ch √¢m ch∆∞a t·ªët l·∫Øm.",
                    "T·∫°m ·ªïn. Gi√° h·ª£p l√Ω, ph√≤ng s·∫°ch. C√≥ th·ªÉ c·∫£i thi·ªán th√™m v·ªÅ d·ªãch v·ª•.",
                    "Kh√° ok! Ph√≤ng ƒë·∫πp nh∆∞ng h∆°i nh·ªè so v·ªõi mong ƒë·ª£i.",
                    "T·ªët! S·∫°ch s·∫Ω, ti·ªán nghi ƒë·∫ßy ƒë·ªß. ƒêi·ªÅu h√≤a h∆°i ·ªìn m·ªôt ch√∫t.",
                    "·ªîn! View ƒë·∫πp, v·ªã tr√≠ t·ªët. Gi√° c√≥ v·∫ª h∆°i cao.",
                    "Kh√° h√†i l√≤ng. Ph√≤ng t·ªët, nh√¢n vi√™n nhi·ªát t√¨nh. B√£i ƒë·ªó xe h∆°i xa."
                },
                [3] = new List<string>
                {
                    "B√¨nh th∆∞·ªùng. Ph√≤ng s·∫°ch nh∆∞ng h∆°i c≈©. Gi√° t∆∞∆°ng ƒë·ªëi ok.",
                    "·ªû ƒë∆∞·ª£c. V·ªã tr√≠ t·ªët nh∆∞ng ph√≤ng ch∆∞a ƒë∆∞·ª£c t·ªët l·∫Øm.",
                    "T·∫°m ·ªïn. S·∫°ch s·∫Ω nh∆∞ng ti·ªán nghi h∆°i c≈©. C·∫ßn n√¢ng c·∫•p.",
                    "Trung b√¨nh. Wifi y·∫øu, ƒëi·ªÅu h√≤a kh√¥ng m√°t l·∫Øm.",
                    "Ok nh∆∞ng kh√¥ng xu·∫•t s·∫Øc. Gi√° h∆°i cao so v·ªõi ch·∫•t l∆∞·ª£ng.",
                    "B√¨nh th∆∞·ªùng th√¥i. Ph√≤ng nh·ªè, view kh√¥ng ƒë·∫πp l·∫Øm.",
                    "T·∫°m ƒë∆∞·ª£c. S·∫°ch s·∫Ω nh∆∞ng c√°ch √¢m k√©m. Ng·ªß h∆°i kh√≥.",
                    "·ªû ƒë∆∞·ª£c. Nh√¢n vi√™n ok nh∆∞ng ph√≤ng c·∫ßn c·∫£i t·∫°o l·∫°i.",
                    "Trung b√¨nh kh√°. V·ªã tr√≠ t·ªët nh∆∞ng ti·ªán nghi c·∫ßn n√¢ng c·∫•p.",
                    "Kh√¥ng t·ªá nh∆∞ng kh√¥ng t·ªët. Gi√° h∆°i cao."
                },
                [2] = new List<string>
                {
                    "Kh√¥ng ƒë∆∞·ª£c t·ªët l·∫Øm. Ph√≤ng ch∆∞a s·∫°ch, ti·ªán nghi c≈©.",
                    "H∆°i th·∫•t v·ªçng. Kh√¥ng gi·ªëng h√¨nh. C·∫ßn c·∫£i thi·ªán nhi·ªÅu.",
                    "D∆∞·ªõi mong ƒë·ª£i. Ph√≤ng nh·ªè, c≈©. Wifi kh√¥ng ho·∫°t ƒë·ªông.",
                    "Ch∆∞a t·ªët. Nh√¢n vi√™n ch∆∞a nhi·ªát t√¨nh. Ph√≤ng c·∫ßn v·ªá sinh k·ªπ h∆°n.",
                    "Kh√¥ng h√†i l√≤ng l·∫Øm. Gi√° cao nh∆∞ng ch·∫•t l∆∞·ª£ng th·∫•p.",
                    "T·ªá. Ph√≤ng ·ªìn, c√°ch √¢m k√©m. Kh√≥ ng·ªß.",
                    "Kh√¥ng ƒë∆∞·ª£c nh∆∞ k·ª≥ v·ªçng. Nhi·ªÅu ti·ªán nghi h·ªèng.",
                    "Ch∆∞a ·ªïn. Ph√≤ng c√≥ m√πi, ƒëi·ªÅu h√≤a kh√¥ng m√°t.",
                    "Th·∫•t v·ªçng. Kh√¥ng s·∫°ch s·∫Ω. S·∫Ω kh√¥ng quay l·∫°i.",
                    "D∆∞·ªõi trung b√¨nh. C·∫ßn c·∫£i thi·ªán r·∫•t nhi·ªÅu."
                },
                [1] = new List<string>
                {
                    "R·∫•t t·ªá! Ph√≤ng b·∫©n, ti·ªán nghi h·ªèng. Kh√¥ng recommend!",
                    "Kinh kh·ªßng! Kh√¥ng gi·ªëng h√¨nh. Ph√≤ng b·∫©n, m√πi kh√≥ ch·ªãu.",
                    "T·ªá nh·∫•t t·ª´ng ·ªü! Nh√¢n vi√™n th√°i ƒë·ªô, ph√≤ng d∆° b·∫©n.",
                    "Kh√¥ng th·ªÉ ch·∫•p nh·∫≠n ƒë∆∞·ª£c! Ph√≤ng ·ªìn c·∫£ ƒë√™m, kh√¥ng ng·ªß ƒë∆∞·ª£c.",
                    "Qu√° t·ªá! Ti·ªÅn m·∫•t t·∫≠t mang. Kh√¥ng bao gi·ªù quay l·∫°i!",
                    "Th·∫•t v·ªçng tr√†n tr·ªÅ! M·ªçi th·ª© ƒë·ªÅu t·ªá.",
                    "1 sao c≈©ng c√≤n th·ª´a! Ph√≤ng b·∫©n, d·ªãch v·ª• t·ªá.",
                    "Kh√¥ng th·ªÉ t·ªá h∆°n! Kh√¥ng ƒë√°ng ƒë·ªìng ti·ªÅn n√†o.",
                    "T·ªá h·∫°i! Ph√≤ng h∆∞ h·ªèng nhi·ªÅu, nh√¢n vi√™n kh√¥ng quan t√¢m.",
                    "Kinh kh·ªßng! Kh√¥ng bao gi·ªù quay l·∫°i n∆°i n√†y n·ªØa!"
                }
            };


            Console.WriteLine($"üìù ƒêang t·∫°o 5 reviews cho m·ªói room (t·ªïng {rooms.Count} rooms)...");

            int skippedRooms = 0;
            foreach (var room in rooms)
            {
                // N·∫øu user < 5 th√¨ b·ªè qua room n√†y
                if (users.Count < 5)
                {
                    skippedRooms++;
                    continue;
                }
                // M·ªói room c√≥ 5 reviews t·ª´ 5 users kh√°c nhau
                var shuffledUsers = users.OrderBy(x => random.Next()).Take(5).ToList();

                for (int i = 0; i < 5; i++)
                {
                    var rating = random.Next(1, 6); // 1-5 stars
                    var commentList = comments[rating];
                    var comment = commentList[random.Next(commentList.Count)];

                    reviews.Add(new Review
                    {
                        RoomId = room.RoomId,
                        UserId = shuffledUsers[i].UserId,
                        Rating = rating,
                        Comment = comment,
                        CreatedAt = DateTime.Now.AddDays(-random.Next(1, 365)) // Random date trong nƒÉm qua
                    });
                }
            }

            await context.Reviews.AddRangeAsync(reviews);
            await context.SaveChangesAsync();

            Console.WriteLine($"‚úÖ ƒê√£ t·∫°o {reviews.Count} reviews cho {rooms.Count - skippedRooms} rooms (b·ªè qua {skippedRooms} rooms do thi·∫øu user)");
            Console.WriteLine("‚≠ê === HO√ÄN TH√ÄNH SEED REVIEWS ===");
        }
    }
}
