using Microsoft.EntityFrameworkCore;
using BoookingHotels.Models;

namespace BoookingHotels.Data
{
    public static class PhotoUpdater
    {
        public static async Task UpdateHotelPhotosAsync(ApplicationDbContext context)
        {
            try
            {
                // Ch·ªâ update n·∫øu c√≥ hotel thi·∫øu ·∫£nh
                var hotels = await context.Hotels.ToListAsync();
                var hotelsWithFewPhotos = hotels.Where(h => context.Photoss.Count(p => p.HotelId == h.HotelId) < 3).ToList();
                if (!hotelsWithFewPhotos.Any())
                {
                    Console.WriteLine("‚úÖ T·∫•t c·∫£ hotels ƒë√£ c√≥ ƒë·ªß ·∫£nh!");
                    return;
                }

                // X√≥a photos c≈© cho c√°c hotel thi·∫øu ·∫£nh
                var hotelIdsToUpdate = hotelsWithFewPhotos.Select(h => h.HotelId).ToList();
                var existingPhotos = await context.Photoss.Where(p => p.HotelId != null && hotelIdsToUpdate.Contains((int)p.HotelId)).ToListAsync();
                if (existingPhotos.Any())
                {
                    context.Photoss.RemoveRange(existingPhotos);
                    await context.SaveChangesAsync();
                    Console.WriteLine($"üóëÔ∏è  ƒê√£ x√≥a {existingPhotos.Count} ·∫£nh c≈© cho hotels thi·∫øu ·∫£nh");
                }

                Console.WriteLine($"üîÑ ƒêang th√™m ·∫£nh cho {hotelsWithFewPhotos.Count} kh√°ch s·∫°n...");

                // URLs ·∫£nh th·ª±c t·∫ø cho t·ª´ng th√†nh ph·ªë
                // 200+ unique Unsplash hotel images
                var allHotelPhotos = new List<string>();
                for (int i = 1; i <= 200; i++)
                {
                    allHotelPhotos.Add($"https://source.unsplash.com/800x600/?hotel,building,room,view,city,landscape&sig={i}");
                }
                var hotelPhotos = new Dictionary<string, List<string>>
                {
                    ["ƒê√† L·∫°t"] = allHotelPhotos,
                    ["V≈©ng T√†u"] = allHotelPhotos,
                    ["Ph√∫ Qu·ªëc"] = allHotelPhotos,
                    ["ƒê√† N·∫µng"] = allHotelPhotos,
                    ["Nha Trang"] = allHotelPhotos
                };

                var photosToAdd = new List<Photos>();
                var random = new Random();

                foreach (var hotel in hotels)
                {
                    var city = hotel.City;

                    // L·∫•y danh s√°ch ·∫£nh cho th√†nh ph·ªë
                    List<string> cityPhotos;
                    if (hotelPhotos.ContainsKey(city))
                    {
                        cityPhotos = hotelPhotos[city];
                    }
                    else
                    {
                        // N·∫øu kh√¥ng c√≥ ·∫£nh cho th√†nh ph·ªë, d√πng ·∫£nh chung
                        cityPhotos = hotelPhotos["ƒê√† L·∫°t"];
                    }

                    // Th√™m 3-5 ·∫£nh cho m·ªói hotel
                    var photoCount = random.Next(3, 6);
                    var usedPhotos = new HashSet<string>();

                    for (int i = 0; i < photoCount; i++)
                    {
                        string photoUrl;
                        do
                        {
                            photoUrl = cityPhotos[random.Next(cityPhotos.Count)];
                        } while (usedPhotos.Contains(photoUrl) && usedPhotos.Count < cityPhotos.Count);

                        usedPhotos.Add(photoUrl);

                        photosToAdd.Add(new Photos
                        {
                            HotelId = hotel.HotelId,
                            RoomId = null,
                            Url = photoUrl,
                            SortOrder = i + 1
                        });
                    }
                }

                if (photosToAdd.Any())
                {
                    context.Photoss.AddRange(photosToAdd);
                    await context.SaveChangesAsync();
                    Console.WriteLine($"üì∏ ƒê√£ th√™m {photosToAdd.Count} ·∫£nh cho hotels!");
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói c·∫≠p nh·∫≠t ·∫£nh hotel: {ex.Message}");
            }
        }

        public static async Task UpdateRoomPhotosAsync(ApplicationDbContext context)
        {
            try
            {
                // Ch·ªâ update n·∫øu c√≥ room thi·∫øu ·∫£nh
                var rooms = await context.Rooms.Include(r => r.Hotel).Where(r => r.Hotel != null).ToListAsync();
                var roomsWithFewPhotos = rooms.Where(r => context.Photoss.Count(p => p.RoomId == r.RoomId) < 2).ToList();
                if (!roomsWithFewPhotos.Any())
                {
                    Console.WriteLine("‚úÖ T·∫•t c·∫£ rooms ƒë√£ c√≥ ƒë·ªß ·∫£nh!");
                    return;
                }

                // X√≥a room photos c≈© cho c√°c room thi·∫øu ·∫£nh
                var roomIdsToUpdate = roomsWithFewPhotos.Select(r => r.RoomId).ToList();
                var existingRoomPhotos = await context.Photoss.Where(p => p.RoomId != null && roomIdsToUpdate.Contains((int)p.RoomId)).ToListAsync();
                if (existingRoomPhotos.Any())
                {
                    context.Photoss.RemoveRange(existingRoomPhotos);
                    await context.SaveChangesAsync();
                    Console.WriteLine($"üóëÔ∏è  ƒê√£ x√≥a {existingRoomPhotos.Count} ·∫£nh ph√≤ng c≈© cho rooms thi·∫øu ·∫£nh");
                }

                Console.WriteLine($"üîÑ ƒêang th√™m ·∫£nh cho {roomsWithFewPhotos.Count} ph√≤ng...");

                // URLs ·∫£nh ph√≤ng theo lo·∫°i
                // 200+ unique Unsplash room images
                var allRoomPhotos = new List<string>();
                for (int i = 1; i <= 200; i++)
                {
                    allRoomPhotos.Add($"https://source.unsplash.com/800x600/?room,bed,interior,apartment,suite,villa&sig={i}");
                }
                var roomPhotos = new Dictionary<string, List<string>>
                {
                    ["Suite"] = allRoomPhotos,
                    ["Villa"] = allRoomPhotos,
                    ["Room"] = allRoomPhotos,
                    ["Apartment"] = allRoomPhotos
                };

                var photosToAdd = new List<Photos>();
                var random = new Random();

                foreach (var room in rooms)
                {
                    // X√°c ƒë·ªãnh lo·∫°i ph√≤ng
                    string roomType = "Room";
                    if (room.Name.Contains("Suite", StringComparison.OrdinalIgnoreCase))
                        roomType = "Suite";
                    else if (room.Name.Contains("Villa", StringComparison.OrdinalIgnoreCase))
                        roomType = "Villa";
                    else if (room.Name.Contains("Apartment", StringComparison.OrdinalIgnoreCase) ||
                             room.Name.Contains("Studio", StringComparison.OrdinalIgnoreCase))
                        roomType = "Apartment";

                    var typePhotos = roomPhotos[roomType];

                    // Th√™m 2-3 ·∫£nh cho m·ªói room
                    var photoCount = random.Next(2, 4);
                    var usedPhotos = new HashSet<string>();

                    for (int i = 0; i < photoCount; i++)
                    {
                        string photoUrl;
                        do
                        {
                            photoUrl = typePhotos[random.Next(typePhotos.Count)];
                        } while (usedPhotos.Contains(photoUrl) && usedPhotos.Count < typePhotos.Count);

                        usedPhotos.Add(photoUrl);

                        photosToAdd.Add(new Photos
                        {
                            HotelId = null,
                            RoomId = room.RoomId,
                            Url = photoUrl,
                            SortOrder = i + 1
                        });
                    }
                }

                if (photosToAdd.Any())
                {
                    context.Photoss.AddRange(photosToAdd);
                    await context.SaveChangesAsync();
                    Console.WriteLine($"üì∏ ƒê√£ th√™m {photosToAdd.Count} ·∫£nh cho rooms!");
                }

            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói c·∫≠p nh·∫≠t ·∫£nh room: {ex.Message}");
            }
        }

        public static async Task UpdateAllPhotosAsync(ApplicationDbContext context)
        {
            Console.WriteLine("üì∏ === B·∫ÆT ƒê·∫¶U C·∫¨P NH·∫¨T H√åNH ·∫¢NH ===");
            await UpdateHotelPhotosAsync(context);
            await UpdateRoomPhotosAsync(context);
            Console.WriteLine("üì∏ === HO√ÄN TH√ÄNH C·∫¨P NH·∫¨T H√åNH ·∫¢NH ===");
        }
    }
}