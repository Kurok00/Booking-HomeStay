using Microsoft.EntityFrameworkCore;

namespace BoookingHotels.Data
{
    public static class RoomNameUpdater
    {
        public static async Task UpdateRoomNamesAsync(ApplicationDbContext context)
        {
            try
            {
                // L·∫•y danh s√°ch rooms v·ªõi hotel li√™n quan
                var rooms = await context.Rooms
                    .Include(r => r.Hotel)
                    .Where(r => r.Hotel != null)
                    .ToListAsync();
                
                if (!rooms.Any())
                {
                    Console.WriteLine("‚ùå Kh√¥ng c√≥ room n√†o trong database!");
                    return;
                }

                Console.WriteLine($"üîÑ ƒêang c·∫≠p nh·∫≠t t√™n cho {rooms.Count} ph√≤ng...");

                // Danh s√°ch t√™n ph√≤ng theo lo·∫°i kh√°ch s·∫°n
                var roomTypes = new Dictionary<string, List<string>>
                {
                    ["Resort"] = new List<string>
                    {
                        "Ocean View Suite", "Garden Villa", "Beach Front Villa", "Pool Access Room", 
                        "Presidential Suite", "Executive Suite", "Deluxe Ocean Room", "Premier Garden View",
                        "Infinity Pool Villa", "Spa Treatment Suite", "Royal Pavilion", "Sunset Terrace Suite"
                    },
                    ["Hotel"] = new List<string>
                    {
                        "Executive Suite", "Business Deluxe", "Premium King Room", "Corner Suite",
                        "City View Room", "Superior Twin", "Grand Executive", "Signature Suite",
                        "Panoramic Suite", "Club Level Room", "Ambassador Suite", "Presidential Floor"
                    },
                    ["Villa"] = new List<string>
                    {
                        "Private Villa", "Garden Villa", "Hillside Villa", "Valley View Villa",
                        "Mountain Lodge", "Romantic Cottage", "Family Villa", "Luxury Retreat",
                        "Secluded Hideaway", "Panoramic Villa", "Executive Villa", "Heritage Villa"
                    },
                    ["Homestay"] = new List<string>
                    {
                        "Cozy Family Room", "Traditional Room", "Garden House", "Local Experience Room",
                        "Authentic Stay", "Heritage House", "Cultural Room", "Countryside Villa",
                        "Local Family Suite", "Traditional Villa", "Rustic Charm Room", "Village House"
                    },
                    ["Apartment"] = new List<string>
                    {
                        "Studio Apartment", "One Bedroom Suite", "Executive Apartment", "Penthouse Suite",
                        "Serviced Apartment", "City Apartment", "Modern Loft", "Luxury Residence",
                        "Urban Suite", "Contemporary Flat", "Downtown Apartment", "Skyline Apartment"
                    }
                };

                var bedTypes = new[] { "Single", "Double", "Queen", "King", "Twin", "Bunk" };
                var random = new Random();
                int updatedCount = 0;

                // Nh√≥m rooms theo hotel
                var roomsByHotel = rooms.GroupBy(r => r.Hotel);

                foreach (var hotelGroup in roomsByHotel)
                {
                    var hotel = hotelGroup.Key;
                    var hotelRooms = hotelGroup.ToList();
                    
                    // X√°c ƒë·ªãnh lo·∫°i kh√°ch s·∫°n t·ª´ t√™n
                    string hotelType = "Hotel"; // Default
                    foreach (var type in roomTypes.Keys)
                    {
                        if (hotel!.Name.Contains(type, StringComparison.OrdinalIgnoreCase))
                        {
                            hotelType = type;
                            break;
                        }
                    }

                    // N·∫øu kh√¥ng t√¨m th·∫•y type trong t√™n, th·ª≠ ƒëo√°n t·ª´ t√™n hotel
                    if (hotelType == "Hotel")
                    {
                        if (hotel!.Name.Contains("Resort", StringComparison.OrdinalIgnoreCase) ||
                            hotel.Name.Contains("Spa", StringComparison.OrdinalIgnoreCase))
                            hotelType = "Resort";
                        else if (hotel.Name.Contains("Villa", StringComparison.OrdinalIgnoreCase))
                            hotelType = "Villa";
                        else if (hotel.Name.Contains("Homestay", StringComparison.OrdinalIgnoreCase) ||
                                hotel.Name.Contains("House", StringComparison.OrdinalIgnoreCase))
                            hotelType = "Homestay";
                        else if (hotel.Name.Contains("Apartment", StringComparison.OrdinalIgnoreCase) ||
                                hotel.Name.Contains("Residence", StringComparison.OrdinalIgnoreCase))
                            hotelType = "Apartment";
                    }

                    var availableRoomNames = new List<string>(roomTypes[hotelType]);

                    // C·∫≠p nh·∫≠t t·ª´ng room trong hotel
                    foreach (var room in hotelRooms)
                    {
                        string newRoomName;
                        string newBedType;

                        // Ch·ªçn t√™n room t·ª´ danh s√°ch
                        if (availableRoomNames.Any())
                        {
                            var nameIndex = random.Next(0, availableRoomNames.Count);
                            newRoomName = availableRoomNames[nameIndex];
                            availableRoomNames.RemoveAt(nameIndex); // Tr√°nh tr√πng l·∫∑p
                        }
                        else
                        {
                            // N·∫øu h·∫øt t√™n, t·∫°o t√™n m·ªõi
                            newRoomName = $"{hotelType} Room {random.Next(100, 999)}";
                        }

                        // Ch·ªçn bed type ng·∫´u nhi√™n
                        newBedType = bedTypes[random.Next(0, bedTypes.Length)];

                        // Ki·ªÉm tra n·∫øu c·∫ßn update
                        bool needUpdate = room.Name != newRoomName || room.BedType != newBedType;

                        if (needUpdate)
                        {
                            var oldName = room.Name;
                            var oldBedType = room.BedType;
                            
                            room.Name = newRoomName;
                            room.BedType = newBedType;
                            
                            Console.WriteLine($"‚úÖ {hotel!.Name}: '{oldName}' ({oldBedType}) ‚Üí '{newRoomName}' ({newBedType})");
                            updatedCount++;
                        }
                    }
                }

                // L∆∞u thay ƒë·ªïi
                if (updatedCount > 0)
                {
                    await context.SaveChangesAsync();
                    Console.WriteLine($"üéâ ƒê√£ c·∫≠p nh·∫≠t th√†nh c√¥ng {updatedCount} ph√≤ng!");
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è  Kh√¥ng c√≥ thay ƒë·ªïi n√†o c·∫ßn c·∫≠p nh·∫≠t cho rooms!");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói c·∫≠p nh·∫≠t t√™n room: {ex.Message}");
            }
        }

        public static async Task UpdateRoomPricesAsync(ApplicationDbContext context)
        {
            try
            {
                var rooms = await context.Rooms
                    .Include(r => r.Hotel)
                    .Where(r => r.Hotel != null)
                    .ToListAsync();

                if (!rooms.Any())
                {
                    Console.WriteLine("‚ùå Kh√¥ng c√≥ room n√†o ƒë·ªÉ c·∫≠p nh·∫≠t gi√°!");
                    return;
                }

                Console.WriteLine($"üîÑ ƒêang c·∫≠p nh·∫≠t gi√° cho {rooms.Count} ph√≤ng...");

                // Gi√° theo th√†nh ph·ªë v√† lo·∫°i room
                var priceRanges = new Dictionary<string, Dictionary<string, (int min, int max)>>
                {
                    ["ƒê√† L·∫°t"] = new Dictionary<string, (int min, int max)>
                    {
                        ["Hotel"] = (800000, 2500000),
                        ["Resort"] = (1500000, 4500000),
                        ["Villa"] = (2000000, 6000000),
                        ["Homestay"] = (500000, 1200000),
                        ["Apartment"] = (600000, 1800000)
                    },
                    ["V≈©ng T√†u"] = new Dictionary<string, (int min, int max)>
                    {
                        ["Hotel"] = (700000, 2000000),
                        ["Resort"] = (1200000, 3800000),
                        ["Villa"] = (1800000, 5500000),
                        ["Homestay"] = (400000, 1000000),
                        ["Apartment"] = (500000, 1500000)
                    },
                    ["Ph√∫ Qu·ªëc"] = new Dictionary<string, (int min, int max)>
                    {
                        ["Hotel"] = (1000000, 3000000),
                        ["Resort"] = (2000000, 6000000),
                        ["Villa"] = (3000000, 8000000),
                        ["Homestay"] = (600000, 1500000),
                        ["Apartment"] = (800000, 2200000)
                    },
                    ["ƒê√† N·∫µng"] = new Dictionary<string, (int min, int max)>
                    {
                        ["Hotel"] = (900000, 2800000),
                        ["Resort"] = (1800000, 5200000),
                        ["Villa"] = (2500000, 7000000),
                        ["Homestay"] = (500000, 1300000),
                        ["Apartment"] = (700000, 2000000)
                    },
                    ["Nha Trang"] = new Dictionary<string, (int min, int max)>
                    {
                        ["Hotel"] = (800000, 2600000),
                        ["Resort"] = (1600000, 4800000),
                        ["Villa"] = (2200000, 6500000),
                        ["Homestay"] = (450000, 1100000),
                        ["Apartment"] = (600000, 1800000)
                    }
                };

                var random = new Random();
                int updatedCount = 0;

                foreach (var room in rooms)
                {
                    var city = room.Hotel!.City;
                    
                    // X√°c ƒë·ªãnh lo·∫°i room
                    string roomType = "Hotel";
                    if (room.Name.Contains("Suite", StringComparison.OrdinalIgnoreCase) ||
                        room.Name.Contains("Villa", StringComparison.OrdinalIgnoreCase))
                        roomType = "Villa";
                    else if (room.Name.Contains("Resort", StringComparison.OrdinalIgnoreCase) ||
                             room.Name.Contains("Ocean", StringComparison.OrdinalIgnoreCase) ||
                             room.Name.Contains("Beach", StringComparison.OrdinalIgnoreCase))
                        roomType = "Resort";
                    else if (room.Name.Contains("Apartment", StringComparison.OrdinalIgnoreCase) ||
                             room.Name.Contains("Studio", StringComparison.OrdinalIgnoreCase))
                        roomType = "Apartment";
                    else if (room.Name.Contains("Cozy", StringComparison.OrdinalIgnoreCase) ||
                             room.Name.Contains("Traditional", StringComparison.OrdinalIgnoreCase))
                        roomType = "Homestay";

                    if (priceRanges.ContainsKey(city) && priceRanges[city].ContainsKey(roomType))
                    {
                        var (min, max) = priceRanges[city][roomType];
                        var newPrice = random.Next(min, max + 1);
                        
                        // L√†m tr√≤n v·ªÅ s·ªë ƒë·∫πp (x000)
                        newPrice = (newPrice / 50000) * 50000;

                        if (room.Price != newPrice)
                        {
                            var oldPrice = room.Price;
                            room.Price = newPrice;
                            
                            Console.WriteLine($"üí∞ {room.Name}: {oldPrice:C0} ‚Üí {newPrice:C0}");
                            updatedCount++;
                        }
                    }
                }

                if (updatedCount > 0)
                {
                    await context.SaveChangesAsync();
                    Console.WriteLine($"üéâ ƒê√£ c·∫≠p nh·∫≠t gi√° cho {updatedCount} ph√≤ng!");
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è  Kh√¥ng c√≥ thay ƒë·ªïi gi√° n√†o c·∫ßn c·∫≠p nh·∫≠t!");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói c·∫≠p nh·∫≠t gi√° room: {ex.Message}");
            }
        }
    }
}