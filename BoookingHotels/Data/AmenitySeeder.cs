using BoookingHotels.Models;
using Microsoft.EntityFrameworkCore;

namespace BoookingHotels.Data
{
    public static class AmenitySeeder
    {
        public static async Task SeedAmenitiesAndRoomAmenitiesAsync(ApplicationDbContext context)
        {
            Console.WriteLine("üè® === B·∫ÆT ƒê·∫¶U SEED AMENITIES ===");

            // 1. Seed Amenities n·∫øu ch∆∞a c√≥
            if (!await context.Amenities.AnyAsync())
            {
                Console.WriteLine("üìù ƒêang th√™m Amenities...");
                var amenities = new[]
                {
                    new Amenities { Name = "Wi-Fi mi·ªÖn ph√≠", Icon = "bi-wifi" },
                    new Amenities { Name = "ƒêi·ªÅu h√≤a", Icon = "bi-snow" },
                    new Amenities { Name = "TV", Icon = "bi-tv" },
                    new Amenities { Name = "T·ªß l·∫°nh", Icon = "bi-snow2" },
                    new Amenities { Name = "Ban c√¥ng", Icon = "bi-house-door" },
                    new Amenities { Name = "B√£i ƒë·∫≠u xe", Icon = "bi-car-front" },
                    new Amenities { Name = "H·ªì b∆°i", Icon = "bi-water" },
                    new Amenities { Name = "Gym", Icon = "bi-heart-pulse" },
                    new Amenities { Name = "Spa", Icon = "bi-person-hearts" },
                    new Amenities { Name = "Nh√† h√†ng", Icon = "bi-cup-hot" },
                    new Amenities { Name = "Bar", Icon = "bi-cup-straw" },
                    new Amenities { Name = "Ph√≤ng h·ªçp", Icon = "bi-people" },
                    new Amenities { Name = "M√°y s·∫•y t√≥c", Icon = "bi-wind" },
                    new Amenities { Name = "K√©t an to√†n", Icon = "bi-shield-lock" },
                    new Amenities { Name = "Ph·ª•c v·ª• ph√≤ng 24/7", Icon = "bi-clock" },
                    new Amenities { Name = "M√°y gi·∫∑t", Icon = "bi-droplet" },
                    new Amenities { Name = "B√†n l√†m vi·ªác", Icon = "bi-laptop" },
                    new Amenities { Name = "Minibar", Icon = "bi-cup" },
                    new Amenities { Name = "M√°y pha c√† ph√™", Icon = "bi-cup-hot-fill" },
                    new Amenities { Name = "View bi·ªÉn", Icon = "bi-water" }
                };

                await context.Amenities.AddRangeAsync(amenities);
                await context.SaveChangesAsync();
                Console.WriteLine($"‚úÖ ƒê√£ th√™m {amenities.Length} amenities");
            }
            else
            {
                Console.WriteLine("‚úÖ Amenities ƒë√£ t·ªìn t·∫°i");
            }

            // 2. Seed RoomAmenities cho c√°c rooms ch∆∞a c√≥
            var roomsWithoutAmenities = await context.Rooms
                .Include(r => r.RoomAmenities)
                .Where(r => r.RoomAmenities == null || !r.RoomAmenities.Any())
                .ToListAsync();

            if (roomsWithoutAmenities.Any())
            {
                Console.WriteLine($"üìù ƒêang th√™m amenities cho {roomsWithoutAmenities.Count} ph√≤ng...");
                
                var random = new Random();
                var roomAmenities = new List<RoomAmenitie>();
                var totalAmenities = await context.Amenities.CountAsync();

                foreach (var room in roomsWithoutAmenities)
                {
                    // M·ªói ph√≤ng c√≥ 5-10 ti·ªán nghi ng·∫´u nhi√™n
                    var amenityCount = random.Next(5, 11);
                    var amenityIds = Enumerable.Range(1, totalAmenities)
                        .OrderBy(x => random.Next())
                        .Take(amenityCount)
                        .ToList();

                    foreach (var amenityId in amenityIds)
                    {
                        roomAmenities.Add(new RoomAmenitie
                        {
                            RoomId = room.RoomId,
                            AmenityId = amenityId
                        });
                    }
                }

                await context.RoomAmenities.AddRangeAsync(roomAmenities);
                await context.SaveChangesAsync();
                Console.WriteLine($"‚úÖ ƒê√£ th√™m {roomAmenities.Count} room-amenity mappings");
            }
            else
            {
                Console.WriteLine("‚úÖ T·∫•t c·∫£ rooms ƒë·ªÅu ƒë√£ c√≥ amenities");
            }

            Console.WriteLine("üè® === HO√ÄN TH√ÄNH SEED AMENITIES ===");
        }
    }
}
