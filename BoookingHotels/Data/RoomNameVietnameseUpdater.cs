using Microsoft.EntityFrameworkCore;
using BoookingHotels.Models;

namespace BoookingHotels.Data
{
    public static class RoomNameVietnameseUpdater
    {
        public static async Task UpdateAllRoomNamesToVietnameseAsync(ApplicationDbContext context)
        {
            try
            {
                Console.WriteLine("üáªüá≥ === B·∫ÆT ƒê·∫¶U C√ÇP NH·∫¨T T√äN PH√íNG SANG TI·∫æNG VI·ªÜT ===");

                // L·∫•y t·∫•t c·∫£ rooms v·ªõi hotel
                var rooms = await context.Rooms
                    .Include(r => r.Hotel)
                    .Where(r => r.Hotel != null)
                    .ToListAsync();

                if (!rooms.Any())
                {
                    Console.WriteLine("‚ùå Kh√¥ng c√≥ ph√≤ng n√†o trong database!");
                    return;
                }

                Console.WriteLine($"üìä T√¨m th·∫•y {rooms.Count} ph√≤ng c·∫ßn c·∫≠p nh·∫≠t t√™n");

                var random = new Random();
                int updatedCount = 0;

                // Danh s√°ch t√™n ph√≤ng ti·∫øng Vi·ªát theo lo·∫°i kh√°ch s·∫°n
                var vietnameseRoomNames = new Dictionary<string, List<string>>
                {
                    ["Resort"] = new List<string>
                    {
                        "Ph√≤ng H∆∞·ªõng Bi·ªÉn Cao C·∫•p", "Villa V∆∞·ªùn Nhi·ªát ƒê·ªõi", "Villa B√£i Bi·ªÉn",
                        "Ph√≤ng C√≥ B·ªÉ B∆°i Ri√™ng", "CƒÉn H·ªô T·ªïng Th·ªëng", "Ph√≤ng Suite Sang Tr·ªçng",
                        "Ph√≤ng Deluxe H∆∞·ªõng Bi·ªÉn", "Ph√≤ng Premier V∆∞·ªùn Xanh", "Villa B·ªÉ B∆°i V√¥ C·ª±c",
                        "Ph√≤ng Spa Cao C·∫•p", "Bi·ªát Th·ª± Ho√†ng Gia", "Suite S√¢n Th∆∞·ª£ng Ho√†ng H√¥n",
                        "Ph√≤ng View Bi·ªÉn Panorama", "Villa Gia ƒê√¨nh", "Ph√≤ng Honeymoon L√£ng M·∫°n"
                    },
                    ["Hotel"] = new List<string>
                    {
                        "Ph√≤ng Executive Suite", "Ph√≤ng Business Deluxe", "Ph√≤ng Premium King",
                        "Ph√≤ng Corner Suite", "Ph√≤ng H∆∞·ªõng Th√†nh Ph·ªë", "Ph√≤ng Superior Gi∆∞·ªùng ƒê√¥i",
                        "Ph√≤ng Grand Executive", "Ph√≤ng Signature Suite", "Ph√≤ng Panoramic Suite",
                        "Ph√≤ng Club Level", "Ph√≤ng Ambassador Suite", "Ph√≤ng T·∫ßng Cao C·∫•p",
                        "Ph√≤ng Deluxe", "Ph√≤ng Standard Plus", "Ph√≤ng Family Suite"
                    },
                    ["Villa"] = new List<string>
                    {
                        "Bi·ªát Th·ª± Ri√™ng T∆∞", "Bi·ªát Th·ª± V∆∞·ªùn", "Bi·ªát Th·ª± S∆∞·ªùn ƒê·ªìi",
                        "Bi·ªát Th·ª± H∆∞·ªõng Thung L≈©ng", "Nh√† G·ªó N√∫i", "Nh√† V∆∞·ªùn L√£ng M·∫°n",
                        "Bi·ªát Th·ª± Gia ƒê√¨nh", "Villa Ngh·ªâ D∆∞·ª°ng Sang Tr·ªçng", "Villa ·∫®n M√¨nh",
                        "Bi·ªát Th·ª± View To√†n C·∫£nh", "Villa Executive", "Villa Di S·∫£n",
                        "Bi·ªát Th·ª± C·ªï ƒêi·ªÉn", "Villa Hi·ªán ƒê·∫°i", "Bi·ªát Th·ª± Hai T·∫ßng"
                    },
                    ["Homestay"] = new List<string>
                    {
                        "Ph√≤ng Gia ƒê√¨nh ·∫§m C√∫ng", "Ph√≤ng Truy·ªÅn Th·ªëng", "Nh√† V∆∞·ªùn",
                        "Ph√≤ng Tr·∫£i Nghi·ªám ƒê·ªãa Ph∆∞∆°ng", "CƒÉn Nh√† X∆∞a", "Nh√† Di S·∫£n",
                        "Ph√≤ng VƒÉn H√≥a", "Villa N√¥ng Th√¥n", "Ph√≤ng Gia ƒê√¨nh ƒê·ªãa Ph∆∞∆°ng",
                        "Nh√† Truy·ªÅn Th·ªëng", "Ph√≤ng M·ªôc M·∫°c", "Nh√† L√†ng Qu√™",
                        "Ph√≤ng Homestay ƒê√¥i", "Ph√≤ng Homestay ƒê∆°n", "Ph√≤ng Homestay Gia ƒê√¨nh"
                    },
                    ["Apartment"] = new List<string>
                    {
                        "CƒÉn H·ªô Studio", "CƒÉn H·ªô M·ªôt Ph√≤ng Ng·ªß", "CƒÉn H·ªô Executive",
                        "CƒÉn H·ªô Penthouse", "CƒÉn H·ªô D·ªãch V·ª•", "CƒÉn H·ªô Th√†nh Ph·ªë",
                        "Loft Hi·ªán ƒê·∫°i", "CƒÉn H·ªô Cao C·∫•p", "CƒÉn H·ªô ƒê√¥ Th·ªã",
                        "CƒÉn H·ªô Contemporary", "CƒÉn H·ªô Trung T√¢m", "CƒÉn H·ªô View Skyline",
                        "CƒÉn H·ªô Hai Ph√≤ng Ng·ªß", "CƒÉn H·ªô Ba Ph√≤ng Ng·ªß", "CƒÉn H·ªô Duplex"
                    },
                    ["Hostel"] = new List<string>
                    {
                        "Ph√≤ng Dorm 6 Gi∆∞·ªùng", "Ph√≤ng N·ªØ 4 Gi∆∞·ªùng", "Ph√≤ng ƒê√¥i Ri√™ng T∆∞",
                        "Ph√≤ng Capsule", "Ph√≤ng Dorm 8 Gi∆∞·ªùng", "Ph√≤ng Family 4 Ng∆∞·ªùi",
                        "Ph√≤ng T·∫≠p Th·ªÉ", "Ph√≤ng Backpacker", "Ph√≤ng Shared Dorm",
                        "Ph√≤ng Private Twin", "Ph√≤ng Mixed Dorm", "Ph√≤ng Budget"
                    },
                    ["Boutique"] = new List<string>
                    {
                        "Ph√≤ng Designer Suite", "Loft Ngh·ªá Thu·∫≠t", "Ph√≤ng Luxury Studio",
                        "Ph√≤ng Premium Ban C√¥ng", "Ph√≤ng Boutique Deluxe", "Suite Thi·∫øt K·∫ø",
                        "Ph√≤ng Artistic", "Ph√≤ng Unique Design", "Suite Phong C√°ch",
                        "Ph√≤ng Concept", "Ph√≤ng Signature Design", "Suite Contemporary"
                    }
                };

                // Danh s√°ch bed types ti·∫øng Vi·ªát
                var vietnameseBedTypes = new[]
                {
                    "Gi∆∞·ªùng ƒê∆°n", "Gi∆∞·ªùng ƒê√¥i", "Gi∆∞·ªùng Queen", "Gi∆∞·ªùng King",
                    "2 Gi∆∞·ªùng ƒê∆°n", "Gi∆∞·ªùng T·∫ßng", "King + Sofa", "Queen + Sofa",
                    "2 Queen", "2 King", "3 Gi∆∞·ªùng ƒê∆°n", "Gi∆∞·ªùng C·ª° L·ªõn"
                };

                // Nh√≥m rooms theo hotel ƒë·ªÉ ƒë·∫£m b·∫£o t√™n kh√¥ng tr√πng trong c√πng hotel
                var roomsByHotel = rooms.GroupBy(r => r.Hotel);

                foreach (var hotelGroup in roomsByHotel)
                {
                    var hotel = hotelGroup.Key;
                    var hotelRooms = hotelGroup.OrderBy(r => r.RoomId).ToList();

                    // X√°c ƒë·ªãnh lo·∫°i kh√°ch s·∫°n
                    string hotelType = DetermineHotelType(hotel!.Name);

                    // L·∫•y danh s√°ch t√™n ph√≤ng cho lo·∫°i hotel n√†y
                    var availableNames = new List<string>(vietnameseRoomNames[hotelType]);

                    Console.WriteLine($"\nüè® C·∫≠p nh·∫≠t {hotelRooms.Count} ph√≤ng cho '{hotel.Name}' (Lo·∫°i: {hotelType})");

                    int roomNumber = 1;
                    foreach (var room in hotelRooms)
                    {
                        string newRoomName;

                        // Ch·ªçn t√™n t·ª´ danh s√°ch c√≥ s·∫µn
                        if (availableNames.Any())
                        {
                            var nameIndex = random.Next(0, availableNames.Count);
                            newRoomName = availableNames[nameIndex];
                            availableNames.RemoveAt(nameIndex); // X√≥a ƒë·ªÉ tr√°nh tr√πng l·∫∑p
                        }
                        else
                        {
                            // N·∫øu h·∫øt t√™n, t·∫°o t√™n c√≥ s·ªë th·ª© t·ª±
                            newRoomName = $"Ph√≤ng {GetVietnameseRoomType(hotelType)} {roomNumber:D2}";
                        }

                        // Ch·ªçn bed type ti·∫øng Vi·ªát
                        string newBedType = vietnameseBedTypes[random.Next(0, vietnameseBedTypes.Length)];

                        var oldName = room.Name;
                        var oldBedType = room.BedType;

                        room.Name = newRoomName;
                        room.BedType = newBedType;

                        Console.WriteLine($"  ‚úÖ Ph√≤ng #{roomNumber}: '{oldName}' ‚Üí '{newRoomName}' | '{oldBedType}' ‚Üí '{newBedType}'");

                        updatedCount++;
                        roomNumber++;
                    }
                }

                // L∆∞u thay ƒë·ªïi
                await context.SaveChangesAsync();
                Console.WriteLine($"\nüéâ ƒê√É C·∫¨P NH·∫¨T TH√ÄNH C√îNG {updatedCount} PH√íNG SANG TI·∫æNG VI·ªÜT!");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå L·ªói khi c·∫≠p nh·∫≠t t√™n ph√≤ng: {ex.Message}");
                Console.WriteLine($"Stack trace: {ex.StackTrace}");
            }
        }

        private static string DetermineHotelType(string hotelName)
        {
            var name = hotelName.ToLower();

            if (name.Contains("resort") || name.Contains("spa"))
                return "Resort";
            else if (name.Contains("villa") || name.Contains("bi·ªát th·ª±"))
                return "Villa";
            else if (name.Contains("homestay") || name.Contains("nh√† ngh·ªâ"))
                return "Homestay";
            else if (name.Contains("apartment") || name.Contains("cƒÉn h·ªô"))
                return "Apartment";
            else if (name.Contains("hostel") || name.Contains("backpacker"))
                return "Hostel";
            else if (name.Contains("boutique") || name.Contains("luxury"))
                return "Boutique";
            else
                return "Hotel";
        }

        private static string GetVietnameseRoomType(string hotelType)
        {
            return hotelType switch
            {
                "Resort" => "Resort",
                "Villa" => "Villa",
                "Homestay" => "Homestay",
                "Apartment" => "CƒÉn H·ªô",
                "Hostel" => "Dorm",
                "Boutique" => "Boutique",
                _ => "Deluxe"
            };
        }
    }
}
